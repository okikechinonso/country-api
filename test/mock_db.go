// Code generated by MockGen. DO NOT EDIT.
// Source: domain/repository.go

// Package test is a generated GoMock package.
package test

import (
	entity "countries-api/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDbInterface is a mock of DbInterface interface.
type MockDbInterface struct {
	ctrl     *gomock.Controller
	recorder *MockDbInterfaceMockRecorder
}

// MockDbInterfaceMockRecorder is the mock recorder for MockDbInterface.
type MockDbInterfaceMockRecorder struct {
	mock *MockDbInterface
}

// NewMockDbInterface creates a new mock instance.
func NewMockDbInterface(ctrl *gomock.Controller) *MockDbInterface {
	mock := &MockDbInterface{ctrl: ctrl}
	mock.recorder = &MockDbInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDbInterface) EXPECT() *MockDbInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockDbInterface) Create(country entity.Country) (*entity.Country, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", country)
	ret0, _ := ret[0].(*entity.Country)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockDbInterfaceMockRecorder) Create(country interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockDbInterface)(nil).Create), country)
}

// Find mocks base method.
func (m *MockDbInterface) Find(name string) (*entity.Country, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", name)
	ret0, _ := ret[0].(*entity.Country)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockDbInterfaceMockRecorder) Find(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockDbInterface)(nil).Find), name)
}

// FindMany mocks base method.
func (m *MockDbInterface) FindMany() ([]entity.Country, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMany")
	ret0, _ := ret[0].([]entity.Country)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMany indicates an expected call of FindMany.
func (mr *MockDbInterfaceMockRecorder) FindMany() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMany", reflect.TypeOf((*MockDbInterface)(nil).FindMany))
}

// Update mocks base method.
func (m *MockDbInterface) Update(country entity.Country, id string) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", country, id)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockDbInterfaceMockRecorder) Update(country, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockDbInterface)(nil).Update), country, id)
}
